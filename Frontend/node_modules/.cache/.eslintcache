[{"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/index.js":"1","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/App.js":"2","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/TopNavBar.js":"3","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Blog.js":"4","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Notification.js":"5","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Entry.js":"6","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/services/entries.js":"7","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Word.js":"8","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/FileUpload.js":"9","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookList.js":"10","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookPage.js":"11","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/oldFileUpload.js":"12"},{"size":153,"mtime":1690577262764,"results":"13","hashOfConfig":"14"},{"size":6903,"mtime":1690640733206,"results":"15","hashOfConfig":"14"},{"size":875,"mtime":1690631650599,"results":"16","hashOfConfig":"14"},{"size":4890,"mtime":1690640267364,"results":"17","hashOfConfig":"14"},{"size":187,"mtime":1674042501000,"results":"18","hashOfConfig":"14"},{"size":243,"mtime":1689715489371,"results":"19","hashOfConfig":"14"},{"size":1448,"mtime":1690624984378,"results":"20","hashOfConfig":"14"},{"size":1306,"mtime":1690639886451,"results":"21","hashOfConfig":"14"},{"size":5658,"mtime":1690640360318,"results":"22","hashOfConfig":"14"},{"size":964,"mtime":1690639021845,"results":"23","hashOfConfig":"14"},{"size":351,"mtime":1690572013322,"results":"24","hashOfConfig":"14"},{"size":4520,"mtime":1690633043526,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uzvvz7",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/index.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/App.js",["68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84"],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/TopNavBar.js",["85","86"],[],"import React, { useState, useEffect } from 'react';\nimport './TopNavbar.css';\n\nconst TopNavbar = () => {\n  \n  const [showNavbar, setShowNavbar] = useState(true);\n/*\n  const handleScroll = () => {\n    const scrollY = window.scrollY;\n    setShowNavbar(scrollY === 0);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n*/\n  return (\n    <nav className={`top-navbar ${showNavbar ? '' : 'hidden'}`}>\n      <ul>\n        <li><a href = {`/frontend/book/HarryPotter`}>Example</a></li>\n        <li><a href = {`/frontend/about`}>About</a></li>\n        <li><a href = {`/frontend/upload`}>Upload</a></li>\n        <li><a href = {`/frontend/contact`}>Contact</a></li>\n        {/* Add more links as needed */}\n      </ul>\n    </nav>\n  );\n};\n\nexport default TopNavbar;\n","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Blog.js",["87","88","89","90","91","92","93"],[],"import React from 'react';\nimport './index.css';\nimport { useState, useEffect } from 'react'\nimport BookList from './components/BookList';\nimport entryService from './services/entries'\nimport Word from './Word'\nimport axios from 'axios'\n//import { response } from 'express';\n\nconst ComponentWithDescription = (props) => {\n  console.log(`props.data: ${!props.data}`)\n  const data = props.data\n  console.log(`data: ${data}`);\n  if (data === \"start_value\") {\n    return <div>Description of the word will appear here!</div>;\n  }\n  if (!data || !data.senses || data.senses.length === 0) {\n    // Handle the case when data or senses array is empty or undefined\n    return <div>No valid data available for this word.</div>;\n  }\n\n  const { senses } = data;\n\n  return (\n    <div>\n      <h2>{data.word.toUpperCase()}</h2>\n      <h3>Meanings:</h3>\n      {senses.map((sense, index) => (\n        <div key={index}>\n          {sense.glosses && sense.glosses.length > 0 ? (\n            <ul>\n              {sense.glosses.map((gloss, index) => (\n                <li key={index}>{gloss}</li>\n              ))}\n            </ul>\n          ) : (\n            <p>No meanings available.</p>\n          )}\n        </div>\n      ))}\n\n\n{data.synonyms && data.synonyms.length > 0 ? (\n  <>\n  <h3>Synonyms:</h3>\n  <ul>\n    {data.synonyms.map((synonym, index) => (\n      <li key={index}>{synonym.word}</li>\n    ))}\n  </ul></>\n) : (\n  <p>{/*No synonyms available.*/}</p>\n)}\n    </div>\n  );\n};\n\nconst Blog = (props) => {\n\n  \n  const title = props.title\n  console.log(\"slug aka title in Blog.js\", title)\n  const exampleBook = require('./exampleBook.json') \n  const [chosenWord, setChosenWord ] = useState('')\n  const [description, setDescription ] = useState('start_value')\n  const [dict, setDict ] = useState(null)\n  const [book, setBook ] = useState(exampleBook)\n  const [boxOnTheRight, setBoxOnTheRight ] = useState('')\n  const [clicked, setClicked ] = useState('') //for making the box on the right highlighted when a word is clicked\n\n  useEffect(() => {\n    entryService\n    .getBook(title)\n    .then(response => {\n      console.log(\"GetBook succeeded!\");\n      console.log(response);\n      if(response !== '') {\n        console.log(\"response has something\");\n        console.log(\"response.pages\");\n        console.log(\"response.pages[1]\", response.pages[1]);\n        console.log(`response.pages[\"1\"]`, response.pages[\"1\"]);\n        console.log(`response.pageTranslations[\"1\"]`, response.pageTranslations[\"1\"]);\n        setBook(response)\n      } else {\n      console.log(\"response empty\");\n    }\n    })\n    .catch(err => console.log(\"GetBook failed\"))\n  }, [])\n\n\n  \n\n  const fetchWordDescription = (word2) => {\n    setClicked(true);\n\n    // Reset the clicked style after 1 second\n    setTimeout(() => {\n      setClicked(false);\n    }, 1000);\n    \n    console.log(\"fetchWordDescription word2: \", word2);\n    const word = book.pageTranslations[1][word2]\n    console.log(\"fetchWordDescription word: \", word);\n    console.log(word)\n    entryService\n    .getWord(word)\n    .then(response => {\n      if( response === undefined) {\n        console.log(\"Could not fetch word description using this form of the word\", word)\n      //const endpoint = `http://127.0.0.1:5000/pygetword/${encodeURI(word)}`;\n      const endpoint = `https://langapp23flask.onrender.com/pygetword/${encodeURI(word)}`;\n      console.log(`Sending requests to ${endpoint}`);\n      axios.get(endpoint)\n        .then(response => {\n          //console.log(\"respone: \", response);\n          console.log(\"respone data: \", response.data);\n          const file = response.data[\"word\"];\n          console.log(file); // Sending the file data as the response\n          entryService\n          .getWord(word)\n          .then(response => {\n            console.log(response)\n            setDescription(response)\n            setBoxOnTheRight(JSON.stringify(response))\n          })\n        })\n        .catch(err => {\n          console.error('Error occurred again', err);\n        });\n      } else {\n        console.log(\"Response from engine\", response)\n        setDescription(response)\n        setBoxOnTheRight(JSON.stringify(response))\n      }\n    })\n    .catch(err => {\n      \nconsole.log(\"caught an error in connecting through entryService\");\n\n    })\n  }\n  return (\n    <div className=\"container\">\n      <BookList />\n      <div className=\"content\">\n        <h1>{book.title}</h1>\n        <p>\n          {book.pages[1].split(\" \")\n          .map(\n            (word, index) => \n            (<Word key = {index} word = {word} base = {book.pageTranslations[1][word]} fetchWordDescription = {fetchWordDescription}/>)\n          )}\n        </p>\n        {/* Add more paragraphs as needed */}\n      </div>\n      <div className=\"box\">\n        <ComponentWithDescription data = {description} />\n        {/*<p>bb{boxOnTheRight}</p>*/}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Notification.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Entry.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/services/entries.js",["94"],["95"],"import axios from 'axios'\nimport { mongo } from 'mongoose'\n//import BookList from '../components/BookList'\nconst baseUrl = '/api/blogs'\n//langApp\nconst getWord = (word) => {\n  const wo = word.toLowerCase().slice(0, 2)\n  const request = axios.get(`/api/blogs/letters/${wo}/${word.toLowerCase()}`)\n  return request.then(response => response.data).catch(err => console.log(\"Could not get the word in the given form\", err))\n}\n\n//old\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst getBookList = () => {\n  const request = axios.get(`${baseUrl}/booklist`)\n  return request.then(response => response.data)\n}\n\nconst getBook = (title) => {\n  console.log(\"getBook says: making request to \");\n  const request = axios.get(`${baseUrl}/book/${title}`)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(`${baseUrl}/mongonew`, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteById = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { \n  getAll, \n  create, \n  update,\n  deleteById,\n  getWord,\n  getBookList,\n  getBook\n}","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Word.js",["96"],[],"import React, { useState } from \"react\";\n\nconst Word = (props) => {\n  const base =\n    props.base === undefined\n      ? \"mennä\" //a word for when base is absent\n      : props.base;\n\n  const word = props.word;\n  const fetchWordDescription = props.fetchWordDescription;\n\n  const [clicked, setClicked] = useState(false);\n\n  const handleClick = () => {\n    // Call your fetchWordDescription function here\n    fetchWordDescription(\n      word\n        .replaceAll(\".\", \"\")\n        .replaceAll(\",\", \"\")\n        .replaceAll(\"(\", \"\")\n        .replaceAll(\")\", \"\")\n        .replaceAll(\"-\", \"\")\n    );\n\n    // Update state to enable the clicked style\n    setClicked(true);\n\n    // Reset the clicked style after 1 second\n    setTimeout(() => {\n      setClicked(false);\n    }, 1000);\n  };\n\n  // Define the style based on whether it was clicked or not\n  const style = {\n    backgroundColor: clicked ? \"lightblue\" : \"transparent\",\n    borderRadius: \"5px\",\n    transition: \"background-color 1s\",\n    cursor: \"pointer\",\n  };\n\n  // Define the box-shadow style to create the highlighted effect\n  const boxShadowStyle = {\n    boxShadow: clicked ? \"0 0 5px lightblue\" : \"none\",\n  };\n\n  return (\n    <span onClick={handleClick} style={{ ...style, ...boxShadowStyle }}>\n      {word}{\" \"}\n    </span>\n  );\n};\n\nexport default Word;","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/FileUpload.js",["97","98","99"],[],"import React, { useState, useEffect } from 'react';\nimport entries from './services/entries';\nimport styles from './FileUpload.module.css';\nimport TopNavbar from './TopNavBar';\n\n\nfunction FileUpload() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [statusOfUpload, setStatusOfUpload] = useState('Note! It might take a minute to upload and process your pdf file');\n  const [newAuthor, setNewAuthor] = useState('');\n  const [newTitle, setNewTitle] = useState('');\n\n  useEffect(() => {\n    // This effect will run when the statusOfUpload changes\n    if (statusOfUpload === 'Uploading to flask server...' || statusOfUpload === 'Uploading to flask server..' || statusOfUpload === 'Uploading to flask server.' || statusOfUpload === 'Uploading to flask server') {\n      // Start a timer to update the status message every second\n      const timer = setInterval(() => {\n        setStatusOfUpload((prevStatus) => {\n          if (prevStatus.endsWith('...')) {\n            return 'Uploading to flask server';\n          }\n          return prevStatus + '.';\n        });\n      }, 1000);\n\n      // Clear the timer when the status changes to something else\n      return () => clearInterval(timer);\n    }\n  }, [statusOfUpload]);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleMongo = () => {\n    const text = {\n      \"title\":\"Mongoid\",\n      \"author\":\"fellow kid\",\n      \"pages\": {\n        \"1\":\"Hansin tavallinen päivä. aakkosellisuus Aakko Herään arkisin aina kello 7. Pidän rauhallisista aamuista, joten herään yleensä ajoissa. Viikonloppuisin saatan nukkua hieman pidempään. Aamulla teen aamupalaa ja keitän kahvin. Aamupalaa syön lukiessa päivän lehteä. Yleensä syön kaurapuuroa lisukkeilla, mutta joskus saatan tehdä voileivän tai syödä jugurttia myslillä.Sitten vaihdan vaatteet ja valmistaudun työpäivään. Työpäivä alkaa kello 9, joten lähden kotoa aina kello 8:30. Menen töihin linja-autolla. Aamuisin on yleensä ruuhkaa ja bussi on melkein aina täynnä. Joskus olen töissä vasta kello 9:10. Päivällä käyn työkavereiden kanssa lounaalla ravintolassa. Olen töissä kello 17 asti. Onneksi en jää koskaan ylitöihin. Töiden jälkeen hoidan usein keskustassa asioita, käyn kaupassa tai tapaan ystäviä. Sitten menen kotiin. Joskus käyn illalla kuntosalilla, katson televisiota tai luen kirjaa. Joskus teen vähän töitä kotona illalla. Joko minä tai tyttöystäväni tekee illallisen - yleensä vuorottelemme. Illalla katsomme aina kymmenen uutiset ja sen jälkeen aloitamme iltapuuhat ja menemme nukkumaan.\"  \n    },\n    \"pageTranslations\": {\n        \"1\":{\n            \"Hansin\":\"Hansi\",\n            \"tavallinen\":\"tavallinen\",\n            \"päivä\":\"päivä\"\n        }\n    }\n    }\n    entries\n      .create(text)\n      .then(res =>\n        console.log(\"Response from handle mongo: \",res))\n      .catch(err => \n        console.log(\"Handle mongo failed: \",err))\n  }\n\n  const handleUpload = () => {\n    if (selectedFile) {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      if (newAuthor == '' || newTitle == '') {\n        return\n      }\n      setStatusOfUpload('Uploading to flask server...');\n      //const endpoint = `http://127.0.0.1:5000/upload`\n      const endpoint = `https://langapp23flask.onrender.com/upload`;\n      fetch(endpoint, {\n        method: 'POST',\n        body: formData,\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        setStatusOfUpload('Upload completed successfully!');\n        console.log(data); // Access the response from Flask\n        console.log(\"data.message, \", data.message); \n        console.log(\"data.dict, \", data.dict); \n        console.log(\"data.text, \", data.text); \n        setStatusOfUpload(data.message)\n        const text = {\n          \"title\":newTitle,\n          \"author\":newAuthor,\n          \"pages\": {\n            \"1\":data.text  \n        },\n        \"pageTranslations\": {\n            \"1\":data.dict\n        }\n      }\n        entries\n          .create(text)\n          .then(res =>\n            console.log(\"Response from handle mongo: \",res))\n          .catch(err => \n            console.log(\"Handle mongo failed: \",err))\n        \n        // You can update the React state or perform any other actions based on the response.\n      })\n        .catch((error) => {\n          setStatusOfUpload('Upload failed! File took too long to process ( >90 seconds )')\n          console.error('Error occurred while uploading the file:', error);\n        });\n    }\n  };\n\n  const handleTitleChange = (event) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleAuthorChange = (event) => {\n    setNewAuthor(event.target.value);\n  };\n\n  return (\n    <div className={styles.container}>\n      <TopNavbar/>\n      <p className={statusOfUpload === \"\" ? \"\" : styles.status}>{\n      statusOfUpload\n      }</p>\n      <div className={styles['input-group']}>\n        <input type=\"file\" onChange={handleFileChange} />\n      </div>\n      <div className={styles['input-group']}>\n        <input\n          onChange={handleAuthorChange}\n          type=\"text\"\n          placeholder=\"Author. Don't use spaces! Sorry...\"\n          value={newAuthor}\n        />\n        <input\n          onChange={handleTitleChange}\n          type=\"text\"\n          placeholder=\"Title, also with no spaces :o\"\n          value={newTitle}\n        />\n      </div>\n      <div className={styles['input-group']}>\n        <button onClick={handleUpload}>Upload</button>\n        {/*<button onClick={handleMongo}>Mongo!</button>*/}\n      </div>\n    </div>\n  );\n}\n\nexport default FileUpload;","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookList.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookPage.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/oldFileUpload.js",["100","101"],[],"import React, { useState } from 'react';\nimport entries from './services/entries';\n\nfunction FileUpload() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [statusOfUpload, setStatusOfUpload] = useState('');\n  const [newAuthor, setNewAuthor] = useState('');\n  const [newTitle, setNewTitle] = useState('');\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleMongo = () => {\n    const text = {\n      \"title\":\"Mongoid\",\n      \"author\":\"fellow kid\",\n      \"pages\": {\n        \"1\":\"Hansin tavallinen päivä. aakkosellisuus Aakko Herään arkisin aina kello 7. Pidän rauhallisista aamuista, joten herään yleensä ajoissa. Viikonloppuisin saatan nukkua hieman pidempään. Aamulla teen aamupalaa ja keitän kahvin. Aamupalaa syön lukiessa päivän lehteä. Yleensä syön kaurapuuroa lisukkeilla, mutta joskus saatan tehdä voileivän tai syödä jugurttia myslillä.Sitten vaihdan vaatteet ja valmistaudun työpäivään. Työpäivä alkaa kello 9, joten lähden kotoa aina kello 8:30. Menen töihin linja-autolla. Aamuisin on yleensä ruuhkaa ja bussi on melkein aina täynnä. Joskus olen töissä vasta kello 9:10. Päivällä käyn työkavereiden kanssa lounaalla ravintolassa. Olen töissä kello 17 asti. Onneksi en jää koskaan ylitöihin. Töiden jälkeen hoidan usein keskustassa asioita, käyn kaupassa tai tapaan ystäviä. Sitten menen kotiin. Joskus käyn illalla kuntosalilla, katson televisiota tai luen kirjaa. Joskus teen vähän töitä kotona illalla. Joko minä tai tyttöystäväni tekee illallisen - yleensä vuorottelemme. Illalla katsomme aina kymmenen uutiset ja sen jälkeen aloitamme iltapuuhat ja menemme nukkumaan.\"  \n    },\n    \"pageTranslations\": {\n        \"1\":{\n            \"Hansin\":\"Hansi\",\n            \"tavallinen\":\"tavallinen\",\n            \"päivä\":\"päivä\"\n        }\n    }\n    }\n    entries\n      .create(text)\n      .then(res =>\n        console.log(\"Response from handle mongo: \",res))\n      .catch(err => \n        console.log(\"Handle mongo failed: \",err))\n  }\n\n  const handleUpload = () => {\n    if (selectedFile) {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      if (newAuthor == '' || newTitle == '') {\n        return\n      }\n      //const endpoint = `http://127.0.0.1:5000/upload`\n      const endpoint = `https://langapp23flask.onrender.com/upload`;\n      fetch(endpoint, {\n        method: 'POST',\n        body: formData,\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data); // Access the response from Flask\n        console.log(\"data.message, \", data.message); \n        console.log(\"data.dict, \", data.dict); \n        console.log(\"data.text, \", data.text); \n        setStatusOfUpload(data.message)\n        const text = {\n          \"title\":newTitle,\n          \"author\":newAuthor,\n          \"pages\": {\n            \"1\":data.text  \n        },\n        \"pageTranslations\": {\n            \"1\":data.dict\n        }\n      }\n        entries\n          .create(text)\n          .then(res =>\n            console.log(\"Response from handle mongo: \",res))\n          .catch(err => \n            console.log(\"Handle mongo failed: \",err))\n        \n        // You can update the React state or perform any other actions based on the response.\n      })\n        .catch((error) => {\n          console.error('Error occurred while uploading the file:', error);\n        });\n    }\n  };\n\n  const handleTitleChange = (event) => {\n    setNewTitle(event.target.value)\n  }\n\n\n  const handleAuthorChange = (event) => {\n    setNewAuthor(event.target.value)\n  }\n\n  return (\n    <div>\n      <p>{statusOfUpload}</p>\n      <div className=\"input-group\">\n        <label htmlFor=\"author\">Author:</label>\n        <input\n          id=\"author\"\n          onChange={handleAuthorChange}\n          type=\"text\"\n          placeholder=\"Don't use spaces! Sorry...\"\n          value={newAuthor}\n        />\n      </div>\n      <div className=\"input-group\">\n        <label htmlFor=\"title\">Title:</label>\n        <input\n          id=\"title\"\n          onChange={handleTitleChange}\n          type=\"text\"\n          placeholder=\"Some pretty long placeholder...\"\n          value={newTitle}\n        />\n      </div>\n      <div className=\"input-group\">\n        <input type=\"file\" id=\"file\" onChange={handleFileChange} />\n      </div>\n      <button onClick={handleUpload}>Upload</button>\n      <button onClick={handleMongo}>Mongo!</button>\n    </div>\n  );\n}\n\nexport default FileUpload;",{"ruleId":"102","severity":1,"message":"103","line":2,"column":8,"nodeType":"104","messageId":"105","endLine":2,"endColumn":13},{"ruleId":"102","severity":1,"message":"106","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":20},{"ruleId":"102","severity":1,"message":"107","line":9,"column":8,"nodeType":"104","messageId":"105","endLine":9,"endColumn":21},{"ruleId":"102","severity":1,"message":"108","line":10,"column":8,"nodeType":"104","messageId":"105","endLine":10,"endColumn":16},{"ruleId":"102","severity":1,"message":"109","line":16,"column":3,"nodeType":"104","messageId":"105","endLine":16,"endColumn":7},{"ruleId":"102","severity":1,"message":"110","line":17,"column":3,"nodeType":"104","messageId":"105","endLine":17,"endColumn":9},{"ruleId":"111","severity":1,"message":"112","line":44,"column":11,"nodeType":"113","messageId":"114","endLine":44,"endColumn":126,"fix":"115"},{"ruleId":"111","severity":1,"message":"112","line":59,"column":11,"nodeType":"113","messageId":"114","endLine":59,"endColumn":114,"fix":"116"},{"ruleId":"111","severity":1,"message":"112","line":62,"column":13,"nodeType":"113","messageId":"114","endLine":62,"endColumn":137,"fix":"117"},{"ruleId":"111","severity":1,"message":"112","line":65,"column":13,"nodeType":"113","messageId":"114","endLine":65,"endColumn":116,"fix":"118"},{"ruleId":"102","severity":1,"message":"119","line":72,"column":7,"nodeType":"104","messageId":"105","endLine":72,"endColumn":11},{"ruleId":"102","severity":1,"message":"120","line":82,"column":10,"nodeType":"104","messageId":"105","endLine":82,"endColumn":14},{"ruleId":"102","severity":1,"message":"121","line":113,"column":10,"nodeType":"104","messageId":"105","endLine":113,"endColumn":22},{"ruleId":"102","severity":1,"message":"122","line":125,"column":9,"nodeType":"104","messageId":"105","endLine":125,"endColumn":17},{"ruleId":"102","severity":1,"message":"123","line":177,"column":9,"nodeType":"104","messageId":"105","endLine":177,"endColumn":25},{"ruleId":"102","severity":1,"message":"124","line":181,"column":9,"nodeType":"104","messageId":"105","endLine":181,"endColumn":27},{"ruleId":"102","severity":1,"message":"125","line":185,"column":11,"nodeType":"104","messageId":"105","endLine":185,"endColumn":21},{"ruleId":"102","severity":1,"message":"126","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"127","line":6,"column":22,"nodeType":"104","messageId":"105","endLine":6,"endColumn":35},{"ruleId":"102","severity":1,"message":"128","line":64,"column":10,"nodeType":"104","messageId":"105","endLine":64,"endColumn":20},{"ruleId":"102","severity":1,"message":"129","line":64,"column":22,"nodeType":"104","messageId":"105","endLine":64,"endColumn":35},{"ruleId":"102","severity":1,"message":"130","line":66,"column":10,"nodeType":"104","messageId":"105","endLine":66,"endColumn":14},{"ruleId":"102","severity":1,"message":"131","line":66,"column":16,"nodeType":"104","messageId":"105","endLine":66,"endColumn":23},{"ruleId":"102","severity":1,"message":"132","line":68,"column":10,"nodeType":"104","messageId":"105","endLine":68,"endColumn":23},{"ruleId":"102","severity":1,"message":"133","line":69,"column":10,"nodeType":"104","messageId":"105","endLine":69,"endColumn":17},{"ruleId":"134","severity":1,"message":"135","line":89,"column":6,"nodeType":"136","endLine":89,"endColumn":8,"suggestions":"137"},{"ruleId":"102","severity":1,"message":"138","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":15},{"ruleId":"139","severity":1,"message":"140","line":45,"column":1,"nodeType":"141","endLine":53,"endColumn":2,"suppressions":"142"},{"ruleId":"102","severity":1,"message":"143","line":4,"column":9,"nodeType":"104","messageId":"105","endLine":4,"endColumn":13},{"ruleId":"102","severity":1,"message":"144","line":35,"column":9,"nodeType":"104","messageId":"105","endLine":35,"endColumn":20},{"ruleId":"145","severity":1,"message":"146","line":62,"column":21,"nodeType":"147","messageId":"148","endLine":62,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":62,"column":39,"nodeType":"147","messageId":"148","endLine":62,"endColumn":41},{"ruleId":"145","severity":1,"message":"146","line":41,"column":21,"nodeType":"147","messageId":"148","endLine":41,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":41,"column":39,"nodeType":"147","messageId":"148","endLine":41,"endColumn":41},"no-unused-vars","'Entry' is defined but never used.","Identifier","unusedVar","'Notification' is defined but never used.","'OldFileUpload' is defined but never used.","'BookList' is defined but never used.","'Link' is defined but never used.","'Outlet' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"149","text":"150"},{"range":"151","text":"150"},{"range":"152","text":"150"},{"range":"153","text":"150"},"'Home' is assigned a value but never used.","'Post' is defined but never used.","'errorMessage' is assigned a value but never used.","'addEntry' is assigned a value but never used.","'handleNameChange' is assigned a value but never used.","'handleNumberChange' is assigned a value but never used.","'deleteById' is assigned a value but never used.","'useEffect' is defined but never used.","'setShowNavbar' is assigned a value but never used.","'chosenWord' is assigned a value but never used.","'setChosenWord' is assigned a value but never used.","'dict' is assigned a value but never used.","'setDict' is assigned a value but never used.","'boxOnTheRight' is assigned a value but never used.","'clicked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.","ArrayExpression",["154"],"'mongo' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["155"],"'base' is assigned a value but never used.","'handleMongo' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",[1751,1751]," rel=\"noreferrer\"",[2303,2303],[2494,2494],[2652,2652],{"desc":"156","fix":"157"},{"kind":"158","justification":"159"},"Update the dependencies array to be: [title]",{"range":"160","text":"161"},"directive","",[2626,2628],"[title]"]
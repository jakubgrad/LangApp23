[{"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/index.js":"1","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/App.js":"2","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/TopNavBar.js":"3","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Blog.js":"4","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Notification.js":"5","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Entry.js":"6","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/services/entries.js":"7","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Word.js":"8","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/FileUpload.js":"9","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookList.js":"10","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookPage.js":"11"},{"size":153,"mtime":1690577262764,"results":"12","hashOfConfig":"13"},{"size":4677,"mtime":1690580016049,"results":"14","hashOfConfig":"13"},{"size":739,"mtime":1690562349140,"results":"15","hashOfConfig":"13"},{"size":3016,"mtime":1690580793276,"results":"16","hashOfConfig":"13"},{"size":187,"mtime":1674042501000,"results":"17","hashOfConfig":"13"},{"size":243,"mtime":1689715489371,"results":"18","hashOfConfig":"13"},{"size":1397,"mtime":1690580676278,"results":"19","hashOfConfig":"13"},{"size":513,"mtime":1690580977171,"results":"20","hashOfConfig":"13"},{"size":4045,"mtime":1690561417609,"results":"21","hashOfConfig":"13"},{"size":880,"mtime":1690569488320,"results":"22","hashOfConfig":"13"},{"size":351,"mtime":1690572013322,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uzvvz7",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/index.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/App.js",["62","63","64","65","66","67","68","69","70","71","72","73"],[],"import { useState, useEffect } from 'react'\nimport Entry from './components/Entry'\nimport Notification from './components/Notification'\nimport entryService from './services/entries'\nimport Blog from './Blog'\nimport FileUpload from './FileUpload'\nimport TopNavBar from './TopNavBar'\nimport BookList from './components/BookList';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  Outlet,\n  useParams } from 'react-router-dom';\n\nfunction About() {\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>About View</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adip.</p>\n    </div>\n  );\n}\n\nconst Home = () => {\n  console.log(\"Wgat\");\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>Home View</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adip.</p>\n    </div>\n  );\n}\n\nfunction Post() {\n  const { slug } = useParams();\n  //const post = BlogPosts[slug];\n  //if(!post) {\n   // return <span>The blog post you've requested doesn't exist.</span>;\n  //}\n  //const { title, description } = post;\n  return (\n    <div style={{ padding: 20 }}>\n      <h3>{slug}</h3>\n      <p>bruh</p>\n    </div>\n  );\n}\n\nconst Main = () => {\n  const { slug } = useParams();\n  console.log(slug);\n//  const localDevelopment = process.env.LOCAL_DEVELOPMENT //doesnt work\n  //console.log(`Local development: ${localDevelopment}`);\n  const exampleBook = require('./exampleBook.json') \n  console.log(exampleBook);\n  const [entries, setEntries] = useState([\n  {\n      \"name\": \"Arto Hellas\",\n      \"number\": \"040-123456\",\n      \"id\": 1\n    }\n  ])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    entryService\n      .getAll()\n      .then(initialEntries => {\n        console.log(\" connection successful\");\n        setEntries(initialEntries)\n      })\n      .catch(err => console.log(\"Couldn't connect\",err))\n  }, [])\n\n  const addEntry = (event) => {\n    event.preventDefault()\n\n    const entryObject = {\n      name: newName,\n      number: newNumber,\n    }\n\n    if(entries.find(entry => entry.name === newName)) {\n      console.log(\"Name already in database!\")\n      const entry = entries.find(entry => entry.name === newName)\n      const id = entry.id\n      entryService\n        .update(id, entryObject).then(returnedEntry => {\n          setEntries(entries.map(entry => entry.id !== id ? entry : returnedEntry))\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          const error_message = \"400 (Bad request). \" + error.response.data.error\n          setErrorMessage(\n            error_message\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n\n        })\n\n    } else {\n    entryService\n      .create(entryObject)\n        .then(returnedEntry => {\n        setEntries(entries.concat(returnedEntry))\n        setNewName('')\n      })\n      .catch(error => {\n        const error_message = \"400 (Bad request). \" + error.response.data.error\n        setErrorMessage(\n          error_message\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n        \n      \n\n    }\n  \n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n    const deleteById = id => { \n      entryService\n        .deleteById(id).then(returnedEntry => { \n          console.log(\"Delete entry of id $ { id } ??\", returnedEntry);\n          setEntries(entries.filter(entry => entry.id !== id))\n        })\n    }\n\n  return (\n    \n    <div>\n    \n    <div className=\"main-content\">\n    <TopNavBar />\n    \n    <Blog title = {slug}/>\n    </div>\n    <FileUpload />\n    {\n      /*\n      <Notification message={errorMessage} />\n      <ul>\n        <ul>\n          {entries.map(entry => \n            <Entry\n              key={entry.id}\n              entry={entry}\n              deleteById={() => deleteById(entry.id)}\n            />\n          )}\n        </ul>\n      </ul>\n      <form onSubmit={addEntry}>\n        <input placeholder=\"Name\" value={newName} onChange={handleNameChange} />\n        <input placeholder=\"Number\" value={newNumber} onChange={handleNumberChange} />\n        <button type=\"submit\">save</button>\n      </form>\n          */\n         \n    }\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <Router>\n      <Routes>\n        {/*<Route path=\"/\" element={<Main />} />*/}\n        <Route path=\"frontend/book/:slug\" element={<Main />} />\n        <Route path=\"frontend/about\" element={<About />} />\n      </Routes>\n    </Router>\n  )\n}\n\nexport default App\n","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/TopNavBar.js",["74","75","76"],[],"import React, { useState, useEffect } from 'react';\nimport './TopNavbar.css';\n\nconst TopNavbar = () => {\n  const [showNavbar, setShowNavbar] = useState(true);\n\n  const handleScroll = () => {\n    const scrollY = window.scrollY;\n    setShowNavbar(scrollY === 0);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <nav className={`top-navbar ${showNavbar ? '' : 'hidden'}`}>\n      <ul>\n        <li><a href=\"#\">Home</a></li>\n        <li><a href=\"#\">About</a></li>\n        <li><a href=\"#\">Contact</a></li>\n        {/* Add more links as needed */}\n      </ul>\n    </nav>\n  );\n};\n\nexport default TopNavbar;\n","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Blog.js",["77","78","79","80","81"],[],"import React from 'react';\nimport './index.css';\nimport { useState, useEffect } from 'react'\nimport BookList from './components/BookList';\nimport entryService from './services/entries'\nimport Word from './Word'\nimport axios from 'axios'\n//import { response } from 'express';\n\nconst Blog = (props) => {\n\n  \n  const title = props.title\n  const exampleBook = require('./exampleBook.json') \n  const [chosenWord, setChosenWord ] = useState('')\n  const [dict, setDict ] = useState(null)\n  const [book, setBook ] = useState(exampleBook)\n  const [boxOnTheRight, setBoxOnTheRight ] = useState('')\n  console.log(boxOnTheRight);\n\n  useEffect(() => {\n    entryService\n    .getBook(title)\n    .then(response => {\n      console.log(\"GetBook succeeded!\");\n      console.log(response);\n      if(response !== '') {\n        console.log(\"response has something\");\n        console.log(\"response.pages\");\n        console.log(\"response.pages[1]\", response.pages[1]);\n        console.log(`response.pages[\"1\"]`, response.pages[\"1\"]);\n        setBook(response)\n      } else {\n      console.log(\"response empty\");\n    }\n    })\n    .catch(err => console.log(\"GetBook failed\"))\n  }, [])\n\n\n  \n\n  const fetchWordDescription = (word) => {\n    entryService\n    .getWord(word)\n    .then(response => {\n      if( response === undefined) {\n        console.log(\"Could not fetch word description using this form of the word\", word)\n      //const endpoint = `http://127.0.0.1:5000/pygetword/${encodeURI(word)}`;\n      const endpoint = `https://langapp23flask.onrender.com/pygetword/${encodeURI(word)}`;\n      console.log(`Sending requests to ${endpoint}`);\n      axios.get(endpoint)\n        .then(response => {\n          //console.log(\"respone: \", response);\n          console.log(\"respone data: \", response.data);\n          const file = response.data[\"word\"];\n          console.log(file); // Sending the file data as the response\n          entryService\n          .getWord(word)\n          .then(response => {\n            console.log(response)\n            setBoxOnTheRight(JSON.stringify(response))\n          })\n        })\n        .catch(err => {\n          console.error('Error occurred again', err);\n        });\n      } else {\n        console.log(\"Response from engine\", response)\n        setBoxOnTheRight(JSON.stringify(response))\n      }\n    })\n    .catch(err => {\n      \nconsole.log(\"caught an error in connecting through entryService\");\n\n    })\n  }\n  return (\n    <div className=\"container\">\n      <BookList />\n      <div className=\"content\">\n        <h1>{book.title}</h1>\n        <p>\n          {book.pages[1].split(\" \")\n          .map(\n            (word, index) => \n            (<Word key = {index} word = {word} base = {book.pageTranslations[1][word]} fetchWordDescription = {fetchWordDescription}/>)\n          )}\n        </p>\n        {/* Add more paragraphs as needed */}\n      </div>\n      <div className=\"box\">\n        <h2>{boxOnTheRight}Box on the right</h2>\n        <p>bb{boxOnTheRight}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Notification.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/Entry.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/services/entries.js",["82"],["83"],"import axios from 'axios'\nimport { mongo } from 'mongoose'\n//import BookList from '../components/BookList'\nconst baseUrl = '/api/blogs'\n//langApp\nconst getWord = (word) => {\n  const wo = word.toLowerCase().slice(0, 2)\n  const request = axios.get(`/api/blogs/letters/${wo}/${word.toLowerCase()}`)\n  return request.then(response => response.data).catch(err => console.log(\"Could not get the word in the given form\", err))\n}\n\n//old\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst getBookList = () => {\n  const request = axios.get(`${baseUrl}/booklist`)\n  return request.then(response => response.data)\n}\n\nconst getBook = (title) => {\n  const request = axios.get(`${baseUrl}/book/${title}`)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(`${baseUrl}/mongonew`, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteById = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { \n  getAll, \n  create, \n  update,\n  deleteById,\n  getWord,\n  getBookList,\n  getBook\n}","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/Word.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/FileUpload.js",["84","85"],[],"import React, { useState } from 'react';\nimport entries from './services/entries';\n\nfunction FileUpload() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [statusOfUpload, setStatusOfUpload] = useState('');\n  const [newAuthor, setNewAuthor] = useState('');\n  const [newTitle, setNewTitle] = useState('');\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleMongo = () => {\n    const text = {\n      \"title\":\"Mongoid\",\n      \"author\":\"fellow kid\",\n      \"pages\": {\n        \"1\":\"Hansin tavallinen päivä. aakkosellisuus Aakko Herään arkisin aina kello 7. Pidän rauhallisista aamuista, joten herään yleensä ajoissa. Viikonloppuisin saatan nukkua hieman pidempään. Aamulla teen aamupalaa ja keitän kahvin. Aamupalaa syön lukiessa päivän lehteä. Yleensä syön kaurapuuroa lisukkeilla, mutta joskus saatan tehdä voileivän tai syödä jugurttia myslillä.Sitten vaihdan vaatteet ja valmistaudun työpäivään. Työpäivä alkaa kello 9, joten lähden kotoa aina kello 8:30. Menen töihin linja-autolla. Aamuisin on yleensä ruuhkaa ja bussi on melkein aina täynnä. Joskus olen töissä vasta kello 9:10. Päivällä käyn työkavereiden kanssa lounaalla ravintolassa. Olen töissä kello 17 asti. Onneksi en jää koskaan ylitöihin. Töiden jälkeen hoidan usein keskustassa asioita, käyn kaupassa tai tapaan ystäviä. Sitten menen kotiin. Joskus käyn illalla kuntosalilla, katson televisiota tai luen kirjaa. Joskus teen vähän töitä kotona illalla. Joko minä tai tyttöystäväni tekee illallisen - yleensä vuorottelemme. Illalla katsomme aina kymmenen uutiset ja sen jälkeen aloitamme iltapuuhat ja menemme nukkumaan.\"  \n    },\n    \"pageTranslations\": {\n        \"1\":{\n            \"Hansin\":\"Hansi\",\n            \"tavallinen\":\"tavallinen\",\n            \"päivä\":\"päivä\"\n        }\n    }\n    }\n    entries\n      .create(text)\n      .then(res =>\n        console.log(\"Response from handle mongo: \",res))\n      .catch(err => \n        console.log(\"Handle mongo failed: \",err))\n  }\n\n  const handleUpload = () => {\n    if (selectedFile) {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      if (newAuthor == '' || newTitle == '') {\n        return\n      }\n      //const endpoint = `http://127.0.0.1:5000/upload`\n      const endpoint = `https://langapp23flask.onrender.com/upload`;\n      fetch(endpoint, {\n        method: 'POST',\n        body: formData,\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data); // Access the response from Flask\n        console.log(\"data.message, \", data.message); \n        console.log(\"data.dict, \", data.dict); \n        console.log(\"data.text, \", data.text); \n        setStatusOfUpload(data.message)\n        const text = {\n          \"title\":newTitle,\n          \"author\":newAuthor,\n          \"pages\": {\n            \"1\":data.text  \n        },\n        \"pageTranslations\": {\n            \"1\":data.dict\n        }\n      }\n        entries\n          .create(text)\n          .then(res =>\n            console.log(\"Response from handle mongo: \",res))\n          .catch(err => \n            console.log(\"Handle mongo failed: \",err))\n        \n        // You can update the React state or perform any other actions based on the response.\n      })\n        .catch((error) => {\n          console.error('Error occurred while uploading the file:', error);\n        });\n    }\n  };\n\n  const handleTitleChange = (event) => {\n    setNewTitle(event.target.value)\n  }\n\n\n  const handleAuthorChange = (event) => {\n    setNewAuthor(event.target.value)\n  }\n\n  return (\n    <div>\n      <p>{statusOfUpload}</p>\n      <input type=\"file\" onChange={handleFileChange} />\n      <input onChange= { handleAuthorChange} type='text' placeholder='Author'/>\n      <input onChange= { handleTitleChange} type='text' placeholder='Title'/>\n      <button onClick={handleUpload}>Upload</button>\n      <button onClick={handleMongo}>Mongo!</button>\n    </div>\n  );\n}\n\nexport default FileUpload;","/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookList.js",[],[],"/home/gradjaku/Documents/LangApp/1.0/LangApp23/Frontend/src/components/BookPage.js",[],[],{"ruleId":"86","severity":1,"message":"87","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":13},{"ruleId":"86","severity":1,"message":"90","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":20},{"ruleId":"86","severity":1,"message":"91","line":8,"column":8,"nodeType":"88","messageId":"89","endLine":8,"endColumn":16},{"ruleId":"86","severity":1,"message":"92","line":14,"column":3,"nodeType":"88","messageId":"89","endLine":14,"endColumn":7},{"ruleId":"86","severity":1,"message":"93","line":15,"column":3,"nodeType":"88","messageId":"89","endLine":15,"endColumn":9},{"ruleId":"86","severity":1,"message":"94","line":27,"column":7,"nodeType":"88","messageId":"89","endLine":27,"endColumn":11},{"ruleId":"86","severity":1,"message":"95","line":37,"column":10,"nodeType":"88","messageId":"89","endLine":37,"endColumn":14},{"ruleId":"86","severity":1,"message":"96","line":68,"column":10,"nodeType":"88","messageId":"89","endLine":68,"endColumn":22},{"ruleId":"86","severity":1,"message":"97","line":80,"column":9,"nodeType":"88","messageId":"89","endLine":80,"endColumn":17},{"ruleId":"86","severity":1,"message":"98","line":132,"column":9,"nodeType":"88","messageId":"89","endLine":132,"endColumn":25},{"ruleId":"86","severity":1,"message":"99","line":136,"column":9,"nodeType":"88","messageId":"89","endLine":136,"endColumn":27},{"ruleId":"86","severity":1,"message":"100","line":140,"column":11,"nodeType":"88","messageId":"89","endLine":140,"endColumn":21},{"ruleId":"101","severity":1,"message":"102","line":22,"column":13,"nodeType":"103","endLine":22,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":23,"column":13,"nodeType":"103","endLine":23,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":24,"column":13,"nodeType":"103","endLine":24,"endColumn":25},{"ruleId":"86","severity":1,"message":"104","line":15,"column":10,"nodeType":"88","messageId":"89","endLine":15,"endColumn":20},{"ruleId":"86","severity":1,"message":"105","line":15,"column":22,"nodeType":"88","messageId":"89","endLine":15,"endColumn":35},{"ruleId":"86","severity":1,"message":"106","line":16,"column":10,"nodeType":"88","messageId":"89","endLine":16,"endColumn":14},{"ruleId":"86","severity":1,"message":"107","line":16,"column":16,"nodeType":"88","messageId":"89","endLine":16,"endColumn":23},{"ruleId":"108","severity":1,"message":"109","line":38,"column":6,"nodeType":"110","endLine":38,"endColumn":8,"suggestions":"111"},{"ruleId":"86","severity":1,"message":"112","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":15},{"ruleId":"113","severity":1,"message":"114","line":44,"column":1,"nodeType":"115","endLine":52,"endColumn":2,"suppressions":"116"},{"ruleId":"117","severity":1,"message":"118","line":41,"column":21,"nodeType":"119","messageId":"120","endLine":41,"endColumn":23},{"ruleId":"117","severity":1,"message":"118","line":41,"column":39,"nodeType":"119","messageId":"120","endLine":41,"endColumn":41},"no-unused-vars","'Entry' is defined but never used.","Identifier","unusedVar","'Notification' is defined but never used.","'BookList' is defined but never used.","'Link' is defined but never used.","'Outlet' is defined but never used.","'Home' is assigned a value but never used.","'Post' is defined but never used.","'errorMessage' is assigned a value but never used.","'addEntry' is assigned a value but never used.","'handleNameChange' is assigned a value but never used.","'handleNumberChange' is assigned a value but never used.","'deleteById' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'chosenWord' is assigned a value but never used.","'setChosenWord' is assigned a value but never used.","'dict' is assigned a value but never used.","'setDict' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.","ArrayExpression",["121"],"'mongo' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["122"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"123","fix":"124"},{"kind":"125","justification":"126"},"Update the dependencies array to be: [title]",{"range":"127","text":"128"},"directive","",[1155,1157],"[title]"]